// wui.cpp : Defines the entry point for the application.
//

#include <wui/theme/theme.hpp>
#include <wui/locale/locale.hpp>
#include <wui/window/window.hpp>
#include <wui/control/button.hpp>
#include <wui/control/input.hpp>
#include <wui/control/menu.hpp>
#include <wui/control/list.hpp>
#include <wui/control/select.hpp>
#include <wui/control/image.hpp>
#include <wui/control/text.hpp>
#include <wui/control/message.hpp>

#ifdef _WIN32
#include <Resource.h>
#include <gdiplus.h>
#endif

static const char *en_locale = "{ \"sections\": [ { \"type\": \"button\", \"ok\": \"OK\", \"yes\": \"Yes\", \"no\": \"No\", \"cancel\": \"Cancel\", \"abort\": \"Abort\", \"retry\": \"Retry\", \"ignore\": \"Ignore\", \"try_continue\": \"Try continue\" }, { \"type\": \"window\", \"pin\": \"Pin the window\", \"unpin\": \"Unpin the window\" }, { \"type\": \"edit\", \"copy\": \"Copy\", \"cut\": \"Cut\", \"paste\": \"Paste\", \"undo\": \"Undo\", \"redo\": \"Redo\" } ] }";
static const char *ru_locale = "{ \"sections\": [ { \"type\": \"button\", \"ok\": \"OK\", \"yes\": \"Да\", \"no\": \"Нет\", \"cancel\": \"Отмена\", \"abort\": \"Отказ\", \"retry\": \"Продолжить\", \"ignore\": \"Пропустить\", \"try_continue\": \"Попробовать продолжить\" }, { \"type\": \"window\", \"pin\": \"Прикрепить окно\", \"unpin\": \"Открепить окно\" }, { \"type\": \"edit\", \"copy\": \"Копировать\", \"cut\": \"Вырезать\", \"paste\": \"Вставить\", \"undo\": \"Отменить\", \"redo\": \"Вернуть отмену\" } ] } ";

#ifdef _WIN32
static const char *dark_json = "{ \"controls\": [ { \"type\": \"window\", \"background\": \"#131519\", \"border\": \"#404040\", \"border_width\": 1, \"text\": \"#f5f5f0\", \"active_button\": \"#3b3d41\", \"caption_font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"text\", \"color\": \"#f5f5f0\", \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"image\", \"path\": \"IMAGES_DARK\" }, { \"type\": \"button\", \"calm\": \"#06a5df\", \"active\": \"#1aafe9\", \"border\": \"#00a0d2\", \"border_width\": 1, \"focused_border\": \"#dcd2dc\", \"text\": \"#f0f1f1\", \"disabled\": \"#a5a5a0\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"input\", \"background\": \"#27292d\", \"text\": \"#f0ebf0\", \"selection\": \"#264f78\", \"cursor\": \"#d2d2d2\", \"border\": \"#404040\", \"border_width\": 1, \"focused_border\": \"#8c8c8c\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"select\", \"background\": \"#27292d\", \"border\": \"#404040\", \"border_width\": 1, \"focused_border\": \"#8c8c8c\", \"button_calm\": \"#06a5df\", \"button_active\": \"#1aafe9\", \"text\": \"#f0ebf0\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#9c9c9c\", \"active_item\": \"#43474f\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"list\", \"background\": \"#27292d\", \"border\": \"#404040\", \"focused_border\": \"#8c8c8c\", \"border_width\": 1, \"title\": \"#292929\", \"title_text\": \"#f0ebf0\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#9c9c9c\", \"active_item\": \"#43474f\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"menu\", \"background\": \"#1b1b1c\", \"border\": \"#333337\", \"border_width\": 1, \"text\": \"#f1f1f1\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#333334\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"tooltip\", \"background\": \"#b4aabe\", \"border\": \"#f1f2f7\", \"border_width\": 1, \"text\": \"#061912\", \"round\": 0, \"text_indent\": 3, \"font\": { \"name\": \"Segoe UI\", \"size\": 16 } } ], \"images\": [ { \"window_close\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xD8, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0xA3, 0x96, 0x60, 0x82, 0x0B, 0x97, 0xCE, 0x2D, 0x00, 0xE2, 0x49, 0x04, 0xD4, 0xD8, 0x02, 0xF1, 0x11, 0x4A, 0x7C, 0x72, 0x11, 0x88, 0x73, 0x81, 0x86, 0xCC, 0xC1, 0x65, 0x01, 0x90, 0xDA, 0x06, 0xC4, 0xDF, 0xC8, 0xB6, 0xC4, 0x40, 0xCF, 0xA8, 0x1F, 0x48, 0xD5, 0x03, 0x71, 0x32, 0xBA, 0x45, 0x48, 0x16, 0x1C, 0x07, 0xAA, 0x73, 0xA3, 0x28, 0x4E, 0x80, 0x06, 0x34, 0xA1, 0x5B, 0x04, 0xB5, 0x60, 0x27, 0x31, 0x16, 0x80, 0x00, 0x23, 0xB1, 0xC5, 0x0A, 0xD0, 0xE0, 0x3A, 0x20, 0xD5, 0x08, 0x35, 0xDC, 0x05, 0x88, 0x4F, 0x00, 0x2D, 0xB0, 0x21, 0x46, 0x2F, 0x23, 0x29, 0x65, 0x17, 0xD0, 0xA2, 0x15, 0x40, 0x2A, 0x1C, 0x88, 0x1F, 0x02, 0x2D, 0x50, 0xA0, 0x7A, 0x12, 0x06, 0x5A, 0x00, 0x32, 0x3C, 0x0C, 0x64, 0x01, 0x10, 0xCB, 0x43, 0x7D, 0x46, 0x3D, 0x4B, 0xA0, 0x16, 0x2C, 0x07, 0xE2, 0x63, 0x50, 0x1F, 0x80, 0xE2, 0xA8, 0x96, 0x68, 0x8B, 0x40, 0xC1, 0x85, 0x0F, 0x9F, 0xBF, 0x78, 0x36, 0x1C, 0x88, 0xFF, 0x01, 0xF1, 0x11, 0x34, 0xF1, 0x3A, 0x20, 0xFE, 0x0E, 0xA2, 0x09, 0x99, 0x41, 0x96, 0x05, 0xA4, 0x5A, 0x44, 0x28, 0xB8, 0xCA, 0x81, 0x78, 0x0F, 0xAE, 0x54, 0x04, 0x4D, 0xDE, 0xED, 0xA0, 0x0C, 0x4B, 0xB5, 0xD4, 0x35, 0x5A, 0x0A, 0x8F, 0x5A, 0x32, 0xF8, 0x2C, 0x01, 0x08, 0x30, 0x00, 0x7F, 0xB2, 0xEA, 0x65, 0x17, 0xA5, 0x1F, 0x81, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_expand\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x64, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x23, 0xD4, 0x12, 0x16, 0x6C, 0x82, 0x17, 0x2E, 0x9D, 0x9B, 0x00, 0xA4, 0x0C, 0x48, 0x35, 0xCC, 0x40, 0xCF, 0xC8, 0x81, 0x14, 0x9F, 0x18, 0x90, 0x68, 0x89, 0x02, 0x10, 0xDB, 0x93, 0xE4, 0x13, 0x98, 0x87, 0x70, 0xB9, 0x0C, 0x8B, 0xCF, 0x1B, 0x80, 0x54, 0xFD, 0x68, 0xEA, 0x1A, 0xB5, 0x64, 0x90, 0x64, 0x46, 0x58, 0xDA, 0x87, 0x26, 0x4D, 0x62, 0x80, 0x03, 0xB9, 0x96, 0xC8, 0xE3, 0x4B, 0xFB, 0xA4, 0x00, 0xC6, 0xD1, 0x9A, 0x71, 0xD4, 0x92, 0xA1, 0x6D, 0x09, 0x40, 0x80, 0x01, 0x00, 0x94, 0xC7, 0x13, 0xEF, 0xA5, 0x34, 0x2A, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_normal\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xA2, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x83, 0xCF, 0x12, 0x16, 0x62, 0x15, 0x5E, 0xB8, 0x74, 0xEE, 0x00, 0x31, 0xCA, 0x0C, 0xF4, 0x8C, 0x0A, 0xC8, 0xB6, 0x04, 0x08, 0xEC, 0x81, 0xF8, 0x21, 0x10, 0x3F, 0xC0, 0x21, 0x6F, 0x40, 0xB1, 0x4F, 0xA0, 0x60, 0x01, 0xD0, 0xA5, 0x0D, 0xA4, 0xFA, 0x74, 0xE0, 0xE2, 0x04, 0xE8, 0x2A, 0x05, 0x20, 0xA5, 0x80, 0x45, 0x4A, 0x01, 0x28, 0xE7, 0x80, 0x16, 0x07, 0x1F, 0xC8, 0x8D, 0xF8, 0x04, 0x20, 0xAE, 0xC7, 0x22, 0x1E, 0x0F, 0xC5, 0x30, 0xE0, 0x08, 0xC4, 0x07, 0x28, 0x4D, 0x5D, 0x8E, 0x78, 0x22, 0xB9, 0x1F, 0xE4, 0x18, 0x24, 0x9F, 0x29, 0xE0, 0x4A, 0x14, 0x78, 0x2D, 0x01, 0x06, 0xC5, 0x01, 0x1C, 0xC1, 0x89, 0xEC, 0x33, 0x64, 0xF0, 0x80, 0x1A, 0xA9, 0x0B, 0xC3, 0xA7, 0xB8, 0x1C, 0x32, 0x02, 0x8B, 0x15, 0x60, 0xD8, 0xFF, 0xA7, 0xA5, 0x25, 0x07, 0x88, 0xD4, 0xFF, 0x80, 0x18, 0x45, 0x8C, 0xA3, 0xD5, 0xEF, 0xA8, 0x25, 0x34, 0x03, 0x00, 0x01, 0x06, 0x00, 0xF9, 0x97, 0x2D, 0x6C, 0x84, 0xE4, 0x6F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_minimize\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x37, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x62, 0xA0, 0x31, 0x60, 0x1A, 0xB5, 0x60, 0xD4, 0x82, 0x51, 0x0B, 0x46, 0x2D, 0x18, 0xB5, 0x60, 0x28, 0x58, 0xC0, 0x82, 0x4F, 0xF2, 0xFC, 0xC5, 0xB3, 0xFB, 0x49, 0x30, 0xAB, 0xD0, 0x50, 0xDF, 0xF8, 0x02, 0xDD, 0x7D, 0xC0, 0x30, 0x1A, 0xC9, 0xA3, 0x16, 0x50, 0x0C, 0x00, 0x02, 0x0C, 0x00, 0x26, 0xD9, 0x05, 0x31, 0x5A, 0x7B, 0xB2, 0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_pin\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xF7, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x60, 0x18, 0x05, 0xA3, 0x00, 0x1B, 0xE8, 0xEA, 0xED, 0xE9, 0x07, 0xE2, 0x06, 0x62, 0xD4, 0x32, 0x91, 0x69, 0xC7, 0x41, 0x20, 0xAE, 0x07, 0x5A, 0x72, 0x1E, 0x88, 0x05, 0xA8, 0x6A, 0x01, 0xD0, 0x40, 0x03, 0x20, 0x35, 0x1F, 0x88, 0x13, 0x81, 0x78, 0x23, 0x10, 0xDF, 0x07, 0x8A, 0x29, 0xE0, 0x52, 0xCF, 0x48, 0x86, 0xE1, 0xFB, 0x81, 0xB8, 0xB0, 0xAC, 0xB8, 0x64, 0x01, 0x54, 0xAC, 0x00, 0x48, 0xC5, 0x03, 0xB1, 0x23, 0x50, 0xEC, 0x03, 0xC9, 0x16, 0x40, 0x0D, 0x0D, 0x80, 0x72, 0xF3, 0x91, 0x0D, 0x47, 0x52, 0x73, 0x1F, 0x48, 0x1D, 0x00, 0x8A, 0x27, 0x12, 0x6D, 0x01, 0x34, 0x6C, 0xD7, 0x03, 0x31, 0xC8, 0xFB, 0x0B, 0xA1, 0xC2, 0x17, 0x80, 0x86, 0x6C, 0x40, 0x53, 0x07, 0x0A, 0x2E, 0x03, 0xA8, 0x3A, 0x90, 0x2F, 0x2E, 0x20, 0xCB, 0xB3, 0x10, 0xF0, 0x80, 0x00, 0xD4, 0x65, 0x0D, 0x38, 0x1C, 0x01, 0x33, 0xDC, 0x11, 0xA4, 0x16, 0xA8, 0xEE, 0x01, 0x49, 0x41, 0x04, 0xF5, 0xC5, 0x7E, 0xA8, 0xCB, 0x13, 0x71, 0x19, 0x8E, 0x2D, 0xEC, 0x89, 0x4A, 0x45, 0x50, 0x8D, 0x20, 0xD7, 0x19, 0x40, 0x0D, 0x44, 0x06, 0x0E, 0xA0, 0x94, 0x84, 0xCF, 0x70, 0xA2, 0x92, 0x29, 0xD4, 0x00, 0x50, 0xB8, 0x06, 0xA0, 0x59, 0xF2, 0x00, 0x1A, 0x84, 0x94, 0x65, 0x34, 0x24, 0x43, 0x15, 0xD1, 0x7C, 0x02, 0x32, 0xFC, 0x03, 0x21, 0xFD, 0x8C, 0xC4, 0x18, 0x0E, 0x0B, 0x7F, 0xA4, 0x38, 0x01, 0x19, 0xAC, 0x00, 0x14, 0x57, 0x24, 0xDB, 0x07, 0xE8, 0x86, 0xA3, 0xC5, 0x09, 0xC8, 0xA2, 0x42, 0x4A, 0x0A, 0xB3, 0x02, 0x2C, 0x91, 0x3A, 0x0A, 0x46, 0x01, 0x76, 0x00, 0x10, 0x60, 0x00, 0xAE, 0x1E, 0x69, 0x69, 0x21, 0x0A, 0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" } ] }";
static const char *white_json = "{ \"controls\": [ { \"type\": \"window\", \"background\": \"#f0f0f0\", \"border\": \"#9a9a9a\", \"border_width\": 1, \"text\": \"#191914\", \"active_button\": \"#dcdcdc\", \"caption_font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"text\", \"color\": \"#191914\", \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"image\", \"path\": \"IMAGES_WHITE\" }, { \"type\": \"button\", \"calm\": \"#06a5df\", \"active\": \"#1aafe9\", \"border\": \"#00a0d2\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"text\": \"#181818\", \"disabled\": \"#cdcdc8\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"input\", \"background\": \"#dcdcdc\", \"text\": \"#191914\", \"selection\": \"#99c9ef\", \"cursor\": \"#141414\", \"border\": \"#9a9a9a\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"select\", \"background\": \"#dcdcdc\", \"border\": \"#28788c\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"button_calm\": \"#06a5df\", \"button_active\": \"#1aafe9\", \"text\": \"#191914\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#9e9e9e\", \"active_item\": \"#bfbfbf\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"list\", \"background\": \"#dcdcdc\", \"border\": \"#9a9a9a\", \"focused_border\": \"#140a14\", \"border_width\": 1, \"title\": \"#eeeef2\", \"title_text\": \"#191914\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#9e9e9e\", \"active_item\": \"#bfbfbf\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"menu\", \"background\": \"#eaf0ff\", \"border\": \"#9ba7b7\", \"border_width\": 1, \"text\": \"#1b293e\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#fdf4bf\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"size\": 18 } }, { \"type\": \"tooltip\", \"background\": \"#f1f2f7\", \"border\": \"#767676\", \"border_width\": 1, \"text\": \"#061912\", \"round\": 0, \"text_indent\": 3, \"font\": { \"name\": \"Segoe UI\", \"size\": 16 } } ], \"images\": [ { \"window_close\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xD7, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0xA3, 0x96, 0x60, 0x02, 0x63, 0x53, 0xA3, 0x73, 0x40, 0x1C, 0x4E, 0x40, 0x4D, 0x1D, 0x10, 0x4F, 0xA1, 0xC4, 0x27, 0x6F, 0x80, 0x78, 0x39, 0x2E, 0x8B, 0x40, 0x16, 0x00, 0xA9, 0x4A, 0x20, 0x7E, 0x85, 0xD7, 0x14, 0x50, 0x66, 0xC4, 0x87, 0x8D, 0x4C, 0x0C, 0x8F, 0x00, 0xF1, 0x3F, 0x20, 0x0E, 0x47, 0x13, 0xAF, 0x03, 0xE2, 0xEF, 0x20, 0x9A, 0x90, 0x19, 0x04, 0x2D, 0xC1, 0x66, 0x11, 0xD4, 0x82, 0x9F, 0xC4, 0x58, 0x00, 0xC2, 0x8C, 0xC4, 0x16, 0x2B, 0xC0, 0xA0, 0x39, 0x02, 0xA4, 0xAC, 0x80, 0x78, 0x13, 0x10, 0xFB, 0x03, 0x71, 0xFD, 0xD9, 0xD3, 0xE7, 0x9A, 0x88, 0xD1, 0xCB, 0x48, 0x4A, 0xD9, 0x05, 0xB4, 0xE8, 0x09, 0x90, 0x92, 0x06, 0xE2, 0x85, 0x40, 0x0B, 0x12, 0xA8, 0x9E, 0x84, 0x81, 0x16, 0xCC, 0x81, 0x5A, 0xF0, 0x10, 0x88, 0x63, 0x80, 0x7C, 0x5B, 0xAA, 0x5A, 0x02, 0xB5, 0x20, 0x19, 0x1A, 0x44, 0x0A, 0x40, 0xFA, 0x04, 0x10, 0xEF, 0x24, 0xD6, 0x22, 0x26, 0x12, 0x2D, 0x00, 0xC7, 0x01, 0x90, 0xB6, 0x01, 0x52, 0xA0, 0x38, 0xDA, 0x46, 0x8C, 0x45, 0x4C, 0xA4, 0x5A, 0x00, 0x03, 0x40, 0xBE, 0x1B, 0x90, 0x3A, 0x4E, 0x8C, 0x45, 0x84, 0x7C, 0x12, 0x86, 0x2F, 0x15, 0x21, 0x59, 0xD4, 0x4E, 0xB5, 0xD4, 0x35, 0x5A, 0x0A, 0x8F, 0x5A, 0x32, 0xF8, 0x2C, 0x01, 0x08, 0x30, 0x00, 0x49, 0x6F, 0xC7, 0x7E, 0x6E, 0x7E, 0x2B, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_expand\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x6E, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x23, 0xD4, 0x12, 0x16, 0x6C, 0x82, 0xC6, 0xA6, 0x46, 0x09, 0x40, 0x4A, 0x81, 0x54, 0xC3, 0xCE, 0x9E, 0x3E, 0xD7, 0x40, 0xB4, 0x25, 0x40, 0x00, 0xB2, 0xC4, 0x9E, 0x0C, 0x47, 0x93, 0x64, 0x09, 0x08, 0x1C, 0x04, 0xBA, 0xCC, 0x81, 0x18, 0x93, 0x81, 0x3E, 0x07, 0x19, 0x5E, 0x3F, 0x9A, 0xBA, 0x46, 0x2D, 0x19, 0x24, 0x99, 0x11, 0x0A, 0x04, 0x80, 0x49, 0xD3, 0x81, 0x48, 0x73, 0x14, 0xC8, 0xB5, 0x44, 0x1F, 0x88, 0xF7, 0xD3, 0xD2, 0x27, 0x05, 0x20, 0x9F, 0x50, 0x2B, 0xB8, 0x18, 0x47, 0xAB, 0xDF, 0x51, 0x4B, 0x68, 0x06, 0x00, 0x02, 0x0C, 0x00, 0xE2, 0x89, 0x12, 0xCE, 0x4E, 0x9A, 0xC6, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_normal\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xAE, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x83, 0xCF, 0x12, 0x16, 0x62, 0x14, 0x19, 0x9B, 0x1A, 0x29, 0x00, 0x29, 0x05, 0x22, 0x94, 0x5E, 0x38, 0x7B, 0xFA, 0xDC, 0x07, 0xB2, 0x2C, 0x01, 0x82, 0x04, 0x20, 0xAE, 0x27, 0x42, 0x9D, 0x23, 0x10, 0x1F, 0x20, 0xD7, 0x12, 0x64, 0x43, 0xB0, 0x01, 0x03, 0x20, 0xEE, 0xA7, 0x28, 0xB8, 0x60, 0x00, 0x18, 0x14, 0x07, 0x70, 0x04, 0xE7, 0x20, 0x8D, 0x78, 0xA0, 0xCB, 0xD0, 0x5D, 0xAC, 0x80, 0x45, 0x1C, 0x14, 0xC9, 0x05, 0x94, 0xA4, 0x2E, 0x7B, 0x20, 0x7E, 0x08, 0xC4, 0x0F, 0xA0, 0xFC, 0x07, 0x48, 0x6C, 0x58, 0x1C, 0x50, 0x25, 0x09, 0x2F, 0x00, 0xBA, 0xB4, 0x01, 0x87, 0x4F, 0x2F, 0x80, 0x1C, 0x02, 0xA4, 0xFF, 0x53, 0x2D, 0x9F, 0x60, 0x01, 0x3F, 0xA0, 0x3E, 0x5D, 0x80, 0x26, 0xFE, 0x80, 0xDA, 0x96, 0x3C, 0xC0, 0xE5, 0xD3, 0x41, 0x57, 0xAC, 0x38, 0x00, 0xC3, 0x1C, 0x97, 0x4B, 0x15, 0x70, 0x05, 0x0D, 0xA9, 0x96, 0xD8, 0x43, 0x31, 0x2E, 0x40, 0xB4, 0x25, 0x8C, 0xA3, 0xD5, 0xEF, 0xA8, 0x25, 0x34, 0x03, 0x00, 0x01, 0x06, 0x00, 0x20, 0x29, 0x2E, 0xE2, 0x07, 0x0D, 0x95, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_minimize\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x3B, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x66, 0xA0, 0x31, 0x60, 0x1E, 0xB5, 0x60, 0xD4, 0x82, 0x51, 0x0B, 0x46, 0x2D, 0x18, 0xB5, 0x60, 0x28, 0x58, 0xC0, 0x88, 0x4F, 0xD2, 0xC8, 0xC4, 0xB0, 0x1F, 0x48, 0x19, 0x10, 0x69, 0xD6, 0xC2, 0x73, 0x67, 0xCE, 0x2F, 0x40, 0x17, 0x64, 0x62, 0x18, 0xEA, 0x60, 0x34, 0x15, 0x8D, 0x00, 0x0B, 0x00, 0x02, 0x0C, 0x00, 0x2F, 0x58, 0x05, 0x43, 0x28, 0xEB, 0x22, 0x31, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_pin\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xFD, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xEC, 0x54, 0xC1, 0x0D, 0x82, 0x40, 0x10, 0x44, 0xC3, 0x5F, 0x3A, 0x10, 0x3A, 0x00, 0xE3, 0x1F, 0xA9, 0x40, 0x4A, 0x80, 0x0A, 0x94, 0x12, 0xAC, 0xC0, 0x12, 0x88, 0x15, 0x68, 0x07, 0xE8, 0xDF, 0xC8, 0x75, 0xA0, 0x76, 0x70, 0x25, 0x38, 0x97, 0x8C, 0x09, 0x39, 0x2F, 0x02, 0x27, 0x2F, 0xC3, 0x26, 0x93, 0x25, 0xCB, 0xED, 0xEC, 0xEE, 0xDC, 0x82, 0xE3, 0x8C, 0xF6, 0xF7, 0x36, 0xB1, 0x49, 0x5A, 0x2C, 0xA3, 0x0C, 0x2E, 0x06, 0x8A, 0xDB, 0xB5, 0x96, 0xDF, 0xCE, 0x4E, 0x2D, 0x1B, 0x3B, 0x03, 0x29, 0x70, 0x47, 0xB1, 0x70, 0xD0, 0x02, 0x20, 0xF4, 0xE0, 0x8E, 0xC0, 0x09, 0xC8, 0x81, 0x0A, 0xB1, 0x74, 0x10, 0x89, 0x48, 0x5E, 0x01, 0x02, 0xD2, 0xE4, 0x8C, 0x85, 0x8C, 0x25, 0x88, 0x89, 0xDE, 0x05, 0x40, 0xE0, 0x53, 0x0E, 0x45, 0xBE, 0x6E, 0x92, 0x37, 0xCE, 0x94, 0x70, 0x2B, 0xC4, 0x83, 0x5E, 0x12, 0x21, 0x71, 0x0F, 0x57, 0x03, 0x73, 0x86, 0x0E, 0x06, 0xF2, 0x8C, 0x0D, 0x48, 0x3C, 0x6F, 0x75, 0x0E, 0xB7, 0x65, 0x00, 0xD5, 0xF5, 0x03, 0xD8, 0x99, 0xB6, 0x85, 0xE4, 0xAA, 0x89, 0x84, 0xE7, 0x1C, 0x1B, 0x89, 0xD4, 0xF8, 0x21, 0x35, 0x96, 0x26, 0x72, 0x93, 0xF6, 0x9D, 0xB7, 0x88, 0x92, 0x08, 0x6E, 0x8B, 0xD7, 0x78, 0x15, 0x73, 0x32, 0x31, 0xC4, 0x9A, 0x5E, 0x00, 0x5F, 0x2B, 0xF2, 0xA4, 0x84, 0xCE, 0x4F, 0x05, 0x28, 0xC5, 0x06, 0x08, 0xB4, 0x49, 0x66, 0xEA, 0x62, 0xDB, 0xF2, 0xDD, 0x8E, 0xE4, 0x6F, 0xFD, 0x73, 0xDE, 0x49, 0xC5, 0x89, 0x22, 0xEB, 0x7F, 0x91, 0x81, 0x5C, 0xBF, 0x78, 0x89, 0x78, 0x61, 0x55, 0x80, 0x5F, 0x67, 0x69, 0x22, 0x1F, 0x6D, 0xB4, 0x0F, 0x7B, 0x09, 0x30, 0x00, 0x07, 0x20, 0x60, 0xA0, 0xA2, 0xF6, 0x1D, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" } ] }";
#elif __linux__
static const char *dark_json = "{ \"controls\": [ { \"type\": \"window\", \"background\": \"#131519\", \"border\": \"#404040\", \"border_width\": 1, \"text\": \"#f5f5f0\", \"active_button\": \"#3b3d41\", \"caption_font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"text\", \"color\": \"#f5f5f0\", \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"image\", \"path\": \"/home/ud/imgs/dark/\" }, { \"type\": \"button\", \"calm\": \"#06a5df\", \"active\": \"#1aafe9\", \"border\": \"#00a0d2\", \"border_width\": 1, \"focused_border\": \"#dcd2dc\", \"text\": \"#f0f1f1\", \"disabled\": \"#a5a5a0\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"input\", \"background\": \"#27292d\", \"text\": \"#f0ebf0\", \"selection\": \"#264f78\", \"cursor\": \"#d2d2d2\", \"border\": \"#404040\", \"border_width\": 1, \"focused_border\": \"#8c8c8c\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"select\", \"background\": \"#27292d\", \"border\": \"#404040\", \"border_width\": 1, \"focused_border\": \"#8c8c8c\", \"button_calm\": \"#06a5df\", \"button_active\": \"#1aafe9\", \"text\": \"#f0ebf0\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#9c9c9c\", \"active_item\": \"#43474f\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"sans\": 14 } }, { \"type\": \"list\", \"background\": \"#27292d\", \"border\": \"#404040\", \"focused_border\": \"#8c8c8c\", \"border_width\": 1, \"title\": \"#292929\", \"title_text\": \"#f0ebf0\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#9c9c9c\", \"active_item\": \"#43474f\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"menu\", \"background\": \"#1b1b1c\", \"border\": \"#333337\", \"border_width\": 1, \"text\": \"#f1f1f1\", \"scrollbar\": \"#3e3e42\", \"scrollbar_slider\": \"#686868\", \"scrollbar_slider_active\": \"#9e9e9e\", \"selected_item\": \"#333334\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 12 } }, { \"type\": \"tooltip\", \"background\": \"#b4aabe\", \"border\": \"#f1f2f7\", \"border_width\": 1, \"text\": \"#061912\", \"round\": 0, \"text_indent\": 3, \"font\": { \"name\": \"sans\", \"size\": 12 } } ], \"images\": [ { \"window_close\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xD8, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0xA3, 0x96, 0x60, 0x82, 0x0B, 0x97, 0xCE, 0x2D, 0x00, 0xE2, 0x49, 0x04, 0xD4, 0xD8, 0x02, 0xF1, 0x11, 0x4A, 0x7C, 0x72, 0x11, 0x88, 0x73, 0x81, 0x86, 0xCC, 0xC1, 0x65, 0x01, 0x90, 0xDA, 0x06, 0xC4, 0xDF, 0xC8, 0xB6, 0xC4, 0x40, 0xCF, 0xA8, 0x1F, 0x48, 0xD5, 0x03, 0x71, 0x32, 0xBA, 0x45, 0x48, 0x16, 0x1C, 0x07, 0xAA, 0x73, 0xA3, 0x28, 0x4E, 0x80, 0x06, 0x34, 0xA1, 0x5B, 0x04, 0xB5, 0x60, 0x27, 0x31, 0x16, 0x80, 0x00, 0x23, 0xB1, 0xC5, 0x0A, 0xD0, 0xE0, 0x3A, 0x20, 0xD5, 0x08, 0x35, 0xDC, 0x05, 0x88, 0x4F, 0x00, 0x2D, 0xB0, 0x21, 0x46, 0x2F, 0x23, 0x29, 0x65, 0x17, 0xD0, 0xA2, 0x15, 0x40, 0x2A, 0x1C, 0x88, 0x1F, 0x02, 0x2D, 0x50, 0xA0, 0x7A, 0x12, 0x06, 0x5A, 0x00, 0x32, 0x3C, 0x0C, 0x64, 0x01, 0x10, 0xCB, 0x43, 0x7D, 0x46, 0x3D, 0x4B, 0xA0, 0x16, 0x2C, 0x07, 0xE2, 0x63, 0x50, 0x1F, 0x80, 0xE2, 0xA8, 0x96, 0x68, 0x8B, 0x40, 0xC1, 0x85, 0x0F, 0x9F, 0xBF, 0x78, 0x36, 0x1C, 0x88, 0xFF, 0x01, 0xF1, 0x11, 0x34, 0xF1, 0x3A, 0x20, 0xFE, 0x0E, 0xA2, 0x09, 0x99, 0x41, 0x96, 0x05, 0xA4, 0x5A, 0x44, 0x28, 0xB8, 0xCA, 0x81, 0x78, 0x0F, 0xAE, 0x54, 0x04, 0x4D, 0xDE, 0xED, 0xA0, 0x0C, 0x4B, 0xB5, 0xD4, 0x35, 0x5A, 0x0A, 0x8F, 0x5A, 0x32, 0xF8, 0x2C, 0x01, 0x08, 0x30, 0x00, 0x7F, 0xB2, 0xEA, 0x65, 0x17, 0xA5, 0x1F, 0x81, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_expand\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x64, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x23, 0xD4, 0x12, 0x16, 0x6C, 0x82, 0x17, 0x2E, 0x9D, 0x9B, 0x00, 0xA4, 0x0C, 0x48, 0x35, 0xCC, 0x40, 0xCF, 0xC8, 0x81, 0x14, 0x9F, 0x18, 0x90, 0x68, 0x89, 0x02, 0x10, 0xDB, 0x93, 0xE4, 0x13, 0x98, 0x87, 0x70, 0xB9, 0x0C, 0x8B, 0xCF, 0x1B, 0x80, 0x54, 0xFD, 0x68, 0xEA, 0x1A, 0xB5, 0x64, 0x90, 0x64, 0x46, 0x58, 0xDA, 0x87, 0x26, 0x4D, 0x62, 0x80, 0x03, 0xB9, 0x96, 0xC8, 0xE3, 0x4B, 0xFB, 0xA4, 0x00, 0xC6, 0xD1, 0x9A, 0x71, 0xD4, 0x92, 0xA1, 0x6D, 0x09, 0x40, 0x80, 0x01, 0x00, 0x94, 0xC7, 0x13, 0xEF, 0xA5, 0x34, 0x2A, 0xAF, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_normal\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xA2, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x83, 0xCF, 0x12, 0x16, 0x62, 0x15, 0x5E, 0xB8, 0x74, 0xEE, 0x00, 0x31, 0xCA, 0x0C, 0xF4, 0x8C, 0x0A, 0xC8, 0xB6, 0x04, 0x08, 0xEC, 0x81, 0xF8, 0x21, 0x10, 0x3F, 0xC0, 0x21, 0x6F, 0x40, 0xB1, 0x4F, 0xA0, 0x60, 0x01, 0xD0, 0xA5, 0x0D, 0xA4, 0xFA, 0x74, 0xE0, 0xE2, 0x04, 0xE8, 0x2A, 0x05, 0x20, 0xA5, 0x80, 0x45, 0x4A, 0x01, 0x28, 0xE7, 0x80, 0x16, 0x07, 0x1F, 0xC8, 0x8D, 0xF8, 0x04, 0x20, 0xAE, 0xC7, 0x22, 0x1E, 0x0F, 0xC5, 0x30, 0xE0, 0x08, 0xC4, 0x07, 0x28, 0x4D, 0x5D, 0x8E, 0x78, 0x22, 0xB9, 0x1F, 0xE4, 0x18, 0x24, 0x9F, 0x29, 0xE0, 0x4A, 0x14, 0x78, 0x2D, 0x01, 0x06, 0xC5, 0x01, 0x1C, 0xC1, 0x89, 0xEC, 0x33, 0x64, 0xF0, 0x80, 0x1A, 0xA9, 0x0B, 0xC3, 0xA7, 0xB8, 0x1C, 0x32, 0x02, 0x8B, 0x15, 0x60, 0xD8, 0xFF, 0xA7, 0xA5, 0x25, 0x07, 0x88, 0xD4, 0xFF, 0x80, 0x18, 0x45, 0x8C, 0xA3, 0xD5, 0xEF, 0xA8, 0x25, 0x34, 0x03, 0x00, 0x01, 0x06, 0x00, 0xF9, 0x97, 0x2D, 0x6C, 0x84, 0xE4, 0x6F, 0xE0, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_minimize\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x37, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x62, 0xA0, 0x31, 0x60, 0x1A, 0xB5, 0x60, 0xD4, 0x82, 0x51, 0x0B, 0x46, 0x2D, 0x18, 0xB5, 0x60, 0x28, 0x58, 0xC0, 0x82, 0x4F, 0xF2, 0xFC, 0xC5, 0xB3, 0xFB, 0x49, 0x30, 0xAB, 0xD0, 0x50, 0xDF, 0xF8, 0x02, 0xDD, 0x7D, 0xC0, 0x30, 0x1A, 0xC9, 0xA3, 0x16, 0x50, 0x0C, 0x00, 0x02, 0x0C, 0x00, 0x26, 0xD9, 0x05, 0x31, 0x5A, 0x7B, 0xB2, 0x85, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_pin\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xF7, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x60, 0x18, 0x05, 0xA3, 0x00, 0x1B, 0xE8, 0xEA, 0xED, 0xE9, 0x07, 0xE2, 0x06, 0x62, 0xD4, 0x32, 0x91, 0x69, 0xC7, 0x41, 0x20, 0xAE, 0x07, 0x5A, 0x72, 0x1E, 0x88, 0x05, 0xA8, 0x6A, 0x01, 0xD0, 0x40, 0x03, 0x20, 0x35, 0x1F, 0x88, 0x13, 0x81, 0x78, 0x23, 0x10, 0xDF, 0x07, 0x8A, 0x29, 0xE0, 0x52, 0xCF, 0x48, 0x86, 0xE1, 0xFB, 0x81, 0xB8, 0xB0, 0xAC, 0xB8, 0x64, 0x01, 0x54, 0xAC, 0x00, 0x48, 0xC5, 0x03, 0xB1, 0x23, 0x50, 0xEC, 0x03, 0xC9, 0x16, 0x40, 0x0D, 0x0D, 0x80, 0x72, 0xF3, 0x91, 0x0D, 0x47, 0x52, 0x73, 0x1F, 0x48, 0x1D, 0x00, 0x8A, 0x27, 0x12, 0x6D, 0x01, 0x34, 0x6C, 0xD7, 0x03, 0x31, 0xC8, 0xFB, 0x0B, 0xA1, 0xC2, 0x17, 0x80, 0x86, 0x6C, 0x40, 0x53, 0x07, 0x0A, 0x2E, 0x03, 0xA8, 0x3A, 0x90, 0x2F, 0x2E, 0x20, 0xCB, 0xB3, 0x10, 0xF0, 0x80, 0x00, 0xD4, 0x65, 0x0D, 0x38, 0x1C, 0x01, 0x33, 0xDC, 0x11, 0xA4, 0x16, 0xA8, 0xEE, 0x01, 0x49, 0x41, 0x04, 0xF5, 0xC5, 0x7E, 0xA8, 0xCB, 0x13, 0x71, 0x19, 0x8E, 0x2D, 0xEC, 0x89, 0x4A, 0x45, 0x50, 0x8D, 0x20, 0xD7, 0x19, 0x40, 0x0D, 0x44, 0x06, 0x0E, 0xA0, 0x94, 0x84, 0xCF, 0x70, 0xA2, 0x92, 0x29, 0xD4, 0x00, 0x50, 0xB8, 0x06, 0xA0, 0x59, 0xF2, 0x00, 0x1A, 0x84, 0x94, 0x65, 0x34, 0x24, 0x43, 0x15, 0xD1, 0x7C, 0x02, 0x32, 0xFC, 0x03, 0x21, 0xFD, 0x8C, 0xC4, 0x18, 0x0E, 0x0B, 0x7F, 0xA4, 0x38, 0x01, 0x19, 0xAC, 0x00, 0x14, 0x57, 0x24, 0xDB, 0x07, 0xE8, 0x86, 0xA3, 0xC5, 0x09, 0xC8, 0xA2, 0x42, 0x4A, 0x0A, 0xB3, 0x02, 0x2C, 0x91, 0x3A, 0x0A, 0x46, 0x01, 0x76, 0x00, 0x10, 0x60, 0x00, 0xAE, 0x1E, 0x69, 0x69, 0x21, 0x0A, 0x35, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" } ] }";
static const char *white_json = "{ \"controls\": [ { \"type\": \"window\", \"background\": \"#f0f0f0\", \"border\": \"#0a0a0a\", \"border_width\": 1, \"text\": \"#191914\", \"active_button\": \"#dcdcdc\", \"caption_font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"text\", \"color\": \"#191914\", \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"image\", \"path\": \"/home/ud/imgs/white/\" }, { \"type\": \"button\", \"calm\": \"#06a5df\", \"active\": \"#1aafe9\", \"border\": \"#00a0d2\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"text\": \"#181818\", \"disabled\": \"#cdcdc8\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"input\", \"background\": \"#dcdcdc\", \"text\": \"#191914\", \"selection\": \"#99c9ef\", \"cursor\": \"#141414\", \"border\": \"#9a9a9a\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"select\", \"background\": \"#dcdcdc\", \"border\": \"#28788c\", \"border_width\": 1, \"focused_border\": \"#140a14\", \"button_calm\": \"#06a5df\", \"button_active\": \"#1aafe9\", \"text\": \"#191914\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#9e9e9e\", \"active_item\": \"#bfbfbf\", \"round\": 0, \"font\": { \"name\": \"Segoe UI\", \"sans\": 14 } }, { \"type\": \"list\", \"background\": \"#dcdcdc\", \"border\": \"#9a9a9a\", \"focused_border\": \"#140a14\", \"border_width\": 1, \"title\": \"#eeeef2\", \"title_text\": \"#191914\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#9e9e9e\", \"active_item\": \"#bfbfbf\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 14 } }, { \"type\": \"menu\", \"background\": \"#eaf0ff\", \"border\": \"#9ba7b7\", \"border_width\": 1, \"text\": \"#1b293e\", \"scrollbar\": \"#e8e8ec\", \"scrollbar_slider\": \"#c2c3c9\", \"scrollbar_slider_active\": \"#686868\", \"selected_item\": \"#fdf4bf\", \"round\": 0, \"font\": { \"name\": \"sans\", \"size\": 12 } }, { \"type\": \"tooltip\", \"background\": \"#f1f2f7\", \"border\": \"#767676\", \"border_width\": 1, \"text\": \"#061912\", \"round\": 0, \"text_indent\": 3, \"font\": { \"name\": \"sans\", \"size\": 12 } } ], \"images\": [ { \"window_close\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xD7, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0xA3, 0x96, 0x60, 0x02, 0x63, 0x53, 0xA3, 0x73, 0x40, 0x1C, 0x4E, 0x40, 0x4D, 0x1D, 0x10, 0x4F, 0xA1, 0xC4, 0x27, 0x6F, 0x80, 0x78, 0x39, 0x2E, 0x8B, 0x40, 0x16, 0x00, 0xA9, 0x4A, 0x20, 0x7E, 0x85, 0xD7, 0x14, 0x50, 0x66, 0xC4, 0x87, 0x8D, 0x4C, 0x0C, 0x8F, 0x00, 0xF1, 0x3F, 0x20, 0x0E, 0x47, 0x13, 0xAF, 0x03, 0xE2, 0xEF, 0x20, 0x9A, 0x90, 0x19, 0x04, 0x2D, 0xC1, 0x66, 0x11, 0xD4, 0x82, 0x9F, 0xC4, 0x58, 0x00, 0xC2, 0x8C, 0xC4, 0x16, 0x2B, 0xC0, 0xA0, 0x39, 0x02, 0xA4, 0xAC, 0x80, 0x78, 0x13, 0x10, 0xFB, 0x03, 0x71, 0xFD, 0xD9, 0xD3, 0xE7, 0x9A, 0x88, 0xD1, 0xCB, 0x48, 0x4A, 0xD9, 0x05, 0xB4, 0xE8, 0x09, 0x90, 0x92, 0x06, 0xE2, 0x85, 0x40, 0x0B, 0x12, 0xA8, 0x9E, 0x84, 0x81, 0x16, 0xCC, 0x81, 0x5A, 0xF0, 0x10, 0x88, 0x63, 0x80, 0x7C, 0x5B, 0xAA, 0x5A, 0x02, 0xB5, 0x20, 0x19, 0x1A, 0x44, 0x0A, 0x40, 0xFA, 0x04, 0x10, 0xEF, 0x24, 0xD6, 0x22, 0x26, 0x12, 0x2D, 0x00, 0xC7, 0x01, 0x90, 0xB6, 0x01, 0x52, 0xA0, 0x38, 0xDA, 0x46, 0x8C, 0x45, 0x4C, 0xA4, 0x5A, 0x00, 0x03, 0x40, 0xBE, 0x1B, 0x90, 0x3A, 0x4E, 0x8C, 0x45, 0x84, 0x7C, 0x12, 0x86, 0x2F, 0x15, 0x21, 0x59, 0xD4, 0x4E, 0xB5, 0xD4, 0x35, 0x5A, 0x0A, 0x8F, 0x5A, 0x32, 0xF8, 0x2C, 0x01, 0x08, 0x30, 0x00, 0x49, 0x6F, 0xC7, 0x7E, 0x6E, 0x7E, 0x2B, 0x1F, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_expand\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x6E, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x23, 0xD4, 0x12, 0x16, 0x6C, 0x82, 0xC6, 0xA6, 0x46, 0x09, 0x40, 0x4A, 0x81, 0x54, 0xC3, 0xCE, 0x9E, 0x3E, 0xD7, 0x40, 0xB4, 0x25, 0x40, 0x00, 0xB2, 0xC4, 0x9E, 0x0C, 0x47, 0x93, 0x64, 0x09, 0x08, 0x1C, 0x04, 0xBA, 0xCC, 0x81, 0x18, 0x93, 0x81, 0x3E, 0x07, 0x19, 0x5E, 0x3F, 0x9A, 0xBA, 0x46, 0x2D, 0x19, 0x24, 0x99, 0x11, 0x0A, 0x04, 0x80, 0x49, 0xD3, 0x81, 0x48, 0x73, 0x14, 0xC8, 0xB5, 0x44, 0x1F, 0x88, 0xF7, 0xD3, 0xD2, 0x27, 0x05, 0x20, 0x9F, 0x50, 0x2B, 0xB8, 0x18, 0x47, 0xAB, 0xDF, 0x51, 0x4B, 0x68, 0x06, 0x00, 0x02, 0x0C, 0x00, 0xE2, 0x89, 0x12, 0xCE, 0x4E, 0x9A, 0xC6, 0x7B, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_normal\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x19, 0x08, 0x06, 0x00, 0x00, 0x00, 0xC4, 0xE9, 0x85, 0x63, 0x00, 0x00, 0x00, 0x09, 0x70, 0x48, 0x59, 0x73, 0x00, 0x00, 0x0B, 0x13, 0x00, 0x00, 0x0B, 0x13, 0x01, 0x00, 0x9A, 0x9C, 0x18, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xAE, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0xFC, 0xFF, 0xFF, 0x3F, 0x03, 0xAD, 0x01, 0x13, 0x03, 0x1D, 0xC0, 0xA8, 0x25, 0x83, 0xCF, 0x12, 0x16, 0x62, 0x14, 0x19, 0x9B, 0x1A, 0x29, 0x00, 0x29, 0x05, 0x22, 0x94, 0x5E, 0x38, 0x7B, 0xFA, 0xDC, 0x07, 0xB2, 0x2C, 0x01, 0x82, 0x04, 0x20, 0xAE, 0x27, 0x42, 0x9D, 0x23, 0x10, 0x1F, 0x20, 0xD7, 0x12, 0x64, 0x43, 0xB0, 0x01, 0x03, 0x20, 0xEE, 0xA7, 0x28, 0xB8, 0x60, 0x00, 0x18, 0x14, 0x07, 0x70, 0x04, 0xE7, 0x20, 0x8D, 0x78, 0xA0, 0xCB, 0xD0, 0x5D, 0xAC, 0x80, 0x45, 0x1C, 0x14, 0xC9, 0x05, 0x94, 0xA4, 0x2E, 0x7B, 0x20, 0x7E, 0x08, 0xC4, 0x0F, 0xA0, 0xFC, 0x07, 0x48, 0x6C, 0x58, 0x1C, 0x50, 0x25, 0x09, 0x2F, 0x00, 0xBA, 0xB4, 0x01, 0x87, 0x4F, 0x2F, 0x80, 0x1C, 0x02, 0xA4, 0xFF, 0x53, 0x2D, 0x9F, 0x60, 0x01, 0x3F, 0xA0, 0x3E, 0x5D, 0x80, 0x26, 0xFE, 0x80, 0xDA, 0x96, 0x3C, 0xC0, 0xE5, 0xD3, 0x41, 0x57, 0xAC, 0x38, 0x00, 0xC3, 0x1C, 0x97, 0x4B, 0x15, 0x70, 0x05, 0x0D, 0xA9, 0x96, 0xD8, 0x43, 0x31, 0x2E, 0x40, 0xB4, 0x25, 0x8C, 0xA3, 0xD5, 0xEF, 0xA8, 0x25, 0x34, 0x03, 0x00, 0x01, 0x06, 0x00, 0x20, 0x29, 0x2E, 0xE2, 0x07, 0x0D, 0x95, 0x2C, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_minimize\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0x3B, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0x62, 0x66, 0xA0, 0x31, 0x60, 0x1E, 0xB5, 0x60, 0xD4, 0x82, 0x51, 0x0B, 0x46, 0x2D, 0x18, 0xB5, 0x60, 0x28, 0x58, 0xC0, 0x88, 0x4F, 0xD2, 0xC8, 0xC4, 0xB0, 0x1F, 0x48, 0x19, 0x10, 0x69, 0xD6, 0xC2, 0x73, 0x67, 0xCE, 0x2F, 0x40, 0x17, 0x64, 0x62, 0x18, 0xEA, 0x60, 0x34, 0x15, 0x8D, 0x00, 0x0B, 0x00, 0x02, 0x0C, 0x00, 0x2F, 0x58, 0x05, 0x43, 0x28, 0xEB, 0x22, 0x31, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" }, { \"window_pin\": \"0x89, 0x50, 0x4E, 0x47, 0x0D, 0x0A, 0x1A, 0x0A, 0x00, 0x00, 0x00, 0x0D, 0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x08, 0x06, 0x00, 0x00, 0x00, 0xE0, 0x77, 0x3D, 0xF8, 0x00, 0x00, 0x00, 0x19, 0x74, 0x45, 0x58, 0x74, 0x53, 0x6F, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x00, 0x41, 0x64, 0x6F, 0x62, 0x65, 0x20, 0x49, 0x6D, 0x61, 0x67, 0x65, 0x52, 0x65, 0x61, 0x64, 0x79, 0x71, 0xC9, 0x65, 0x3C, 0x00, 0x00, 0x00, 0xFD, 0x49, 0x44, 0x41, 0x54, 0x78, 0xDA, 0xEC, 0x54, 0xC1, 0x0D, 0x82, 0x40, 0x10, 0x44, 0xC3, 0x5F, 0x3A, 0x10, 0x3A, 0x00, 0xE3, 0x1F, 0xA9, 0x40, 0x4A, 0x80, 0x0A, 0x94, 0x12, 0xAC, 0xC0, 0x12, 0x88, 0x15, 0x68, 0x07, 0xE8, 0xDF, 0xC8, 0x75, 0xA0, 0x76, 0x70, 0x25, 0x38, 0x97, 0x8C, 0x09, 0x39, 0x2F, 0x02, 0x27, 0x2F, 0xC3, 0x26, 0x93, 0x25, 0xCB, 0xED, 0xEC, 0xEE, 0xDC, 0x82, 0xE3, 0x8C, 0xF6, 0xF7, 0x36, 0xB1, 0x49, 0x5A, 0x2C, 0xA3, 0x0C, 0x2E, 0x06, 0x8A, 0xDB, 0xB5, 0x96, 0xDF, 0xCE, 0x4E, 0x2D, 0x1B, 0x3B, 0x03, 0x29, 0x70, 0x47, 0xB1, 0x70, 0xD0, 0x02, 0x20, 0xF4, 0xE0, 0x8E, 0xC0, 0x09, 0xC8, 0x81, 0x0A, 0xB1, 0x74, 0x10, 0x89, 0x48, 0x5E, 0x01, 0x02, 0xD2, 0xE4, 0x8C, 0x85, 0x8C, 0x25, 0x88, 0x89, 0xDE, 0x05, 0x40, 0xE0, 0x53, 0x0E, 0x45, 0xBE, 0x6E, 0x92, 0x37, 0xCE, 0x94, 0x70, 0x2B, 0xC4, 0x83, 0x5E, 0x12, 0x21, 0x71, 0x0F, 0x57, 0x03, 0x73, 0x86, 0x0E, 0x06, 0xF2, 0x8C, 0x0D, 0x48, 0x3C, 0x6F, 0x75, 0x0E, 0xB7, 0x65, 0x00, 0xD5, 0xF5, 0x03, 0xD8, 0x99, 0xB6, 0x85, 0xE4, 0xAA, 0x89, 0x84, 0xE7, 0x1C, 0x1B, 0x89, 0xD4, 0xF8, 0x21, 0x35, 0x96, 0x26, 0x72, 0x93, 0xF6, 0x9D, 0xB7, 0x88, 0x92, 0x08, 0x6E, 0x8B, 0xD7, 0x78, 0x15, 0x73, 0x32, 0x31, 0xC4, 0x9A, 0x5E, 0x00, 0x5F, 0x2B, 0xF2, 0xA4, 0x84, 0xCE, 0x4F, 0x05, 0x28, 0xC5, 0x06, 0x08, 0xB4, 0x49, 0x66, 0xEA, 0x62, 0xDB, 0xF2, 0xDD, 0x8E, 0xE4, 0x6F, 0xFD, 0x73, 0xDE, 0x49, 0xC5, 0x89, 0x22, 0xEB, 0x7F, 0x91, 0x81, 0x5C, 0xBF, 0x78, 0x89, 0x78, 0x61, 0x55, 0x80, 0x5F, 0x67, 0x69, 0x22, 0x1F, 0x6D, 0xB4, 0x0F, 0x7B, 0x09, 0x30, 0x00, 0x07, 0x20, 0x60, 0xA0, 0xA2, 0xF6, 0x1D, 0x8A, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4E, 0x44, 0xAE, 0x42, 0x60, 0x82\" } ] }";

const std::string IMG_ACCOUNT = "account.png";
const std::string IMG_SETTINGS = "settings.png";
#endif

struct PluggedWindow : public std::enable_shared_from_this<PluggedWindow>
{
    std::weak_ptr<wui::window> parentWindow;

    std::shared_ptr<wui::window> window;
    std::shared_ptr<wui::list> list;
    std::shared_ptr<wui::button> button1, button2, button3;
    std::shared_ptr<wui::message> messageBox;
    std::weak_ptr<wui::button> creationButton;

    bool plugged;

    void Plug()
    {
        auto parentWindow_ = parentWindow.lock();
        if (parentWindow_)
        {
            parentWindow_->add_control(window, { 0, 30, 300, parentWindow_->position().height() });
        }

        plugged = !plugged;
    }

    void Unplug()
    {
        if (parentWindow.lock())
            parentWindow.lock()->remove_control(window);

        Init();
		
        plugged = !plugged;
    }

    void SetCreationButton(std::shared_ptr<wui::button> &creationButton_)
    {
        creationButton = creationButton_;
    }

    void Init()
    {
        window->init("Child window plugged!", { 0 }, 
            static_cast<wui::window_style>(static_cast<uint32_t>(wui::window_style::pinned) | static_cast<uint32_t>(wui::window_style::border_right)),
            [this]() {
            if (creationButton.lock())
                creationButton.lock()->enable();
        });
    }

    PluggedWindow(std::shared_ptr<wui::window> &parentWindow_)
        : parentWindow(parentWindow_),
        window(new wui::window()),
        list(new wui::list()),
		button1(new wui::button("Button 1", [this]() { 
            messageBox->show("Lorem Ipsum is simply dummy text of the printing and typesetting industry.\nLorem Ipsum has been the industry's\nstandard dummy text ever since the 1500s, when an unknown printer took\na galley of type and scrambled it to make a type specimen book.",
                "hello world", wui::message_icon::information, wui::message_button::ok, [](wui::message_result result) {});
        }, wui::button_view::image, IMG_ACCOUNT, 16)),
        button2(new wui::button("Button 2", []() {}, wui::button_view::image, IMG_ACCOUNT, 16)),
        button3(new wui::button("Button 3", []() {}, wui::button_view::image, IMG_ACCOUNT, 16)),
        messageBox(new wui::message(window, true)),
        creationButton(),
        plugged(false)
    {
        button1->disable_focusing();
        button2->disable_focusing();
        button3->disable_focusing();

        list->set_draw_callback(std::bind(&PluggedWindow::DrawListItem, this, std::placeholders::_1, std::placeholders::_2, std::placeholders::_3, std::placeholders::_4, std::placeholders::_5));

        list->update_columns({ { 30, "##" }, { 100, "Name" }, { 100, "Role" } });
        
        list->set_item_height(32);
        list->set_item_count(100);

        window->add_control(list, { 0 });
        window->add_control(button1, { 0 });
        window->add_control(button2, { 0 });
        window->add_control(button3, { 0 });

        window->set_pin_callback([this](std::string &tooltip_text) {
            if (plugged)
            {
                Unplug();
                tooltip_text = wui::locale("window", "pin");
            }
            else
            {
                Plug();
                tooltip_text = wui::locale("window", "unpin");
            }
        });

        auto sid = window->subscribe([this](const wui::event &e) {
            if (e.internal_event_.type == wui::internal_event_type::size_changed)
            {
                int32_t w = e.internal_event_.x, h = e.internal_event_.y;

                list->set_position({ 10, 30, w - 10, h - 40 }, false);
                button1->set_position({ 10, h - 30, 30, h - 10 }, false);
                button2->set_position({ 40, h - 30, 60, h - 10 }, false);
                button3->set_position({ 70, h - 30, 90, h - 10 }, false);
            }
        }, wui::event_type::internal);

        Plug();
        Init();
    }

    void DrawListItem(wui::graphic &gr, int32_t nItem, const wui::rect &itemRect_, wui::list::item_state state, const std::vector<wui::list::column> &columns)
    {
        auto border_width = wui::theme_dimension(wui::list::tc, wui::list::tv_border_width);

        auto itemRect = itemRect_;

        if (itemRect.bottom > list->position().bottom - border_width)
        {
            itemRect.bottom = list->position().bottom - border_width;
        }

        if (state == wui::list::item_state::active)
        {
            gr.draw_rect(itemRect, wui::theme_color(wui::list::tc, wui::list::tv_active_item));
        }
        else if (state == wui::list::item_state::selected)
        {
            gr.draw_rect(itemRect, wui::theme_color(wui::list::tc, wui::list::tv_selected_item));
        }

        auto textColor = wui::theme_color(wui::input::tc, wui::input::tv_text);
        auto font = wui::theme_font(wui::list::tc, wui::list::tv_font);
        
        auto textHeight = gr.measure_text("Qq", font).height();
        if (textHeight <= itemRect.height())
        {
            auto textRect = itemRect_;

            textRect.move(20, (itemRect_.height() - textHeight) / 2);

            gr.draw_text(textRect, "Item " + std::to_string(nItem), textColor, font);
        }
    }
};

std::shared_ptr<wui::i_theme> MakeControlButtonTheme()
{
    auto controlButtonTheme = wui::make_custom_theme();

    controlButtonTheme->load_theme(*wui::get_default_theme());

    auto background_color = wui::theme_color(wui::window::tc, wui::window::tv_background);

    controlButtonTheme->set_color(wui::button::tc, wui::button::tv_calm, background_color);
    controlButtonTheme->set_color(wui::button::tc, wui::button::tv_active, wui::theme_color(wui::window::tc, wui::window::tv_active_button));
    controlButtonTheme->set_color(wui::button::tc, wui::button::tv_border, background_color);
    controlButtonTheme->set_color(wui::button::tc, wui::button::tv_disabled, background_color);
    controlButtonTheme->set_dimension(wui::button::tc, wui::button::tv_round, 0);

    return controlButtonTheme;
}

std::shared_ptr<wui::i_theme> MakeRedButtonTheme()
{
    auto redButtonTheme = wui::make_custom_theme();

    redButtonTheme->load_theme(*wui::get_default_theme());

    redButtonTheme->set_color(wui::button::tc, wui::button::tv_calm, wui::make_color(205, 15, 20));
    redButtonTheme->set_color(wui::button::tc, wui::button::tv_active, wui::make_color(235, 15, 20));
    redButtonTheme->set_color(wui::button::tc, wui::button::tv_border, wui::make_color(200, 215, 200));
    redButtonTheme->set_color(wui::button::tc, wui::button::tv_focused_border, wui::make_color(20, 215, 20));
    redButtonTheme->set_color(wui::button::tc, wui::button::tv_text, wui::make_color(190, 205, 190));
    redButtonTheme->set_color(wui::button::tc, wui::button::tv_disabled, wui::make_color(180, 190, 180));
    //redButtonTheme->set_string(wui::image::tc, wui::image::tv_path, "IMAGES_DARK");
    
    return redButtonTheme;
}

#ifdef _WIN32
int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
    _In_opt_ HINSTANCE hPrevInstance,
    _In_ LPWSTR    lpCmdLine,
    _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    Gdiplus::GdiplusStartupInput gdiplusStartupInput;
    ULONG_PTR gdiplusToken;
    Gdiplus::GdiplusStartup(&gdiplusToken, &gdiplusStartupInput, NULL);
#elif __linux__
int main(int argc, char *argv[])
{
    if (setlocale(LC_ALL,"") == NULL)
    {
        fprintf(stderr, "warning: could not set default locale\n");
    }

#endif
    bool runned = true;

    wui::set_default_theme_from_json("dark", dark_json);
    wui::set_locale_from_json("en", en_locale);

    std::shared_ptr<wui::window> window(new wui::window());

    auto controlButtonTheme = MakeControlButtonTheme();

    std::shared_ptr<wui::image> menuImage1(new wui::image(IMG_ACCOUNT));
    std::shared_ptr<wui::image> menuImage2(new wui::image(IMG_SETTINGS));

    std::shared_ptr<wui::menu> menu(new wui::menu());

    menu->set_items({
            { 0, wui::menu_item_state::separator, "Bla bla bla", "", menuImage1, {}, [](int32_t i) {} },
            { 1, wui::menu_item_state::normal, "Expand me 1", "", nullptr, {
                    { 11, wui::menu_item_state::normal, "Expanded 1.1", "", nullptr, {}, [](int32_t i) {} },
                    { 12, wui::menu_item_state::normal, "Expanded 1.2", "", nullptr, {
                            { 121, wui::menu_item_state::normal, "Expanded 1.1.1", "", nullptr, {}, [](int32_t i) {} },
                            { 122, wui::menu_item_state::normal, "Expanded 1.1.2", "Shift+Del", menuImage2, {}, [](int32_t i) {} },
                            { 123, wui::menu_item_state::separator, "Expanded 1.1.3", "", nullptr, {}, [](int32_t i) {} },
                        }, [](int32_t i) {} },
                    { 13, wui::menu_item_state::normal, "Expanded 1.3", "", nullptr, {}, [](int32_t i) {} },
                }, [](int32_t i) {} },
            { 2, wui::menu_item_state::separator, "Expand me 2", "Ctrl+Z", nullptr, {
                    { 21, wui::menu_item_state::normal, "Expanded 2.1", "", nullptr, {}, [](int32_t i) {} },
                    { 22, wui::menu_item_state::normal, "Expanded 2.2", "", nullptr, {}, [](int32_t i) {} },
                    { 23, wui::menu_item_state::separator, "Expanded 2.3", "", nullptr, {}, [](int32_t i) {} },
                }, [](int32_t i) {} },
            { 3, wui::menu_item_state::normal, "Exit", "Alt+F4", nullptr, {}, [&window](int32_t i) { window->destroy(); } }
        });

    window->add_control(menu, { 0 });

    std::shared_ptr<wui::button> menuButton(new wui::button("Settings", []() {}, wui::button_view::image, IMG_SETTINGS, 32, controlButtonTheme));
    menuButton->set_callback([&menu, &menuButton]() { menu->show_on_control(menuButton, 5); });
    menuButton->disable_focusing();
    window->add_control(menuButton, { 0 });

    std::shared_ptr<wui::image> accountImage(new wui::image(IMG_ACCOUNT));
    window->add_control(accountImage, { 350, 100, 414, 164 });

    std::shared_ptr<PluggedWindow> pluggedWindow(new PluggedWindow(window));
    std::shared_ptr<wui::button> createPluggedButton(new wui::button("Create plugged window", []() { }));
    createPluggedButton->set_callback([&window, &pluggedWindow, &createPluggedButton]() {
        pluggedWindow.reset();
        pluggedWindow = std::shared_ptr<PluggedWindow>(new PluggedWindow(window));
        pluggedWindow->SetCreationButton(createPluggedButton);
        createPluggedButton->disable(); });
    createPluggedButton->disable();
    pluggedWindow->SetCreationButton(createPluggedButton);

    window->add_control(createPluggedButton, { 320, 50, 400, 75 });

    std::shared_ptr<wui::text> text0(new wui::text("Lorem Ipsum is simply dummy text of the printing and typesetting industry.\nLorem Ipsum has been the industry's\nstandard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum."));
    window->add_control(text0, { 320, 180, 890, 240 });
    
    std::shared_ptr<wui::input> nameInput(new wui::input());
    nameInput->set_text("Hello world!");
    //nameInput->set_input_view(wui::input_view::readonly);
    window->add_control(nameInput, { 320, 250, 890, 275 });

    std::shared_ptr<wui::select> someSelect(new wui::select());
    someSelect->set_items({
            { 0, "Item 0" },
            { 1, "Item 1" },
            { 2, "Item 2" },
            { 3, "Item 3" },
            { 4, "Item 4" },
            { 5, "Item 5" }
        });
    window->add_control(someSelect, { 320, 300, 890, 325 });

    std::shared_ptr<wui::window> dialog(new wui::window());

    std::shared_ptr<wui::button> okButton(new wui::button("OK", [window, &dialog]()
    {
        std::shared_ptr<wui::button> dialogButton(new wui::button("Close", [&dialog]() { dialog->destroy(); }));
        dialog->add_control(dialogButton, { 10, 200, 100, 235 });

        dialog->set_transient_for(window);
        dialog->init("Modal dialog", { 50, 50, 350, 350 }, wui::window_style::dialog, [&dialog]() { /*dialog.reset();*/ });
    }));

    std::shared_ptr<wui::button> cancelButton(new wui::button("Cancel", [window]() { window->destroy(); }, wui::button_view::image, IMG_ACCOUNT, 24, MakeRedButtonTheme()));

    std::shared_ptr<wui::button> darkThemeButton(new wui::button("Set the dark theme", [&window, &pluggedWindow, &dialog, &cancelButton]()
    {
        wui::set_default_theme_from_json("dark", dark_json);
        window->update_theme();
        pluggedWindow->window->update_theme();
        dialog->update_theme(); 
        cancelButton->update_theme(MakeRedButtonTheme());
    }));
    window->add_control(darkThemeButton, { 320, 350, 440, 375 });
	
    std::shared_ptr<wui::button> whiteThemeButton(new wui::button("Set the white theme", [&window, &pluggedWindow, &dialog, &cancelButton]()
    {
        wui::set_default_theme_from_json("white", white_json);
        window->update_theme();
        pluggedWindow->window->update_theme();
        dialog->update_theme();
        cancelButton->update_theme(MakeRedButtonTheme());
    }));
    window->add_control(whiteThemeButton, { 460, 350, 580, 375 });

    window->add_control(okButton, { 240, 450, 350, 480 });
    window->add_control(cancelButton, { 370, 450, 480, 480 });

    window->set_min_size(100, 100);

    auto sid = window->subscribe([&menuButton, text0, &pluggedWindow, &nameInput, &someSelect, &okButton, &cancelButton](const wui::event &e) {
        if (e.internal_event_.type == wui::internal_event_type::size_changed)
        {
            int32_t w = e.internal_event_.x, h = e.internal_event_.y;

            if (pluggedWindow->plugged)
            {
                pluggedWindow->window->set_position({ 0, 30, 300, h }, false);
            }

            menuButton->set_position({ w - 42, 50, w - 10, 82 }, false);
            text0->set_position({ 320, 180, w - 10, 240 }, false);
            nameInput->set_position({ 320, 250, w - 10, 275 }, false);
            someSelect->set_position({ 320, 300, w - 10, 325 }, false);
            okButton->set_position({ w - 250, h - 50, w - 150, h - 20 }, false);
            cancelButton->set_position({ w - 120, h - 50, w - 20, h - 20 }, false);
        }
    }, wui::event_type::internal);

    window->init("Welcome to WUI!", { 100, 100, 900, 600 }, 
        static_cast<wui::window_style>(static_cast<uint32_t>(wui::window_style::frame) | static_cast<uint32_t>(wui::window_style::border_all)),
        //wui::window_style::frame,
        [&runned]() {
#ifdef _WIN32
        PostQuitMessage(IDCANCEL);
#elif __linux__
        runned = false;
#endif
    });
	
#ifdef _WIN32
    // Main message loop:
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }

    //Gdiplus::GdiplusShutdown(gdiplusToken);
    return (int) msg.wParam;
#elif __linux__
    // Wait for main window
    while (runned)
    {
        std::this_thread::sleep_for(std::chrono::milliseconds(100));
    }
    return 0;
#endif
}
